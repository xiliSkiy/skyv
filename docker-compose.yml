version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    build:
      context: ./docker
      dockerfile: Dockerfile.postgres
    container_name: skyeye-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: skyeye
      POSTGRES_USER: skyeye_app
      POSTGRES_PASSWORD: skyeye_app_2024
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./skyv-server/src/main/resources/db/migration:/docker-entrypoint-initdb.d/sql:ro
      - ./docker/logs/postgres:/var/lib/postgresql/data/log
    networks:
      - skyeye-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skyeye_app -d skyeye"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: skyeye-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass skyeye_redis_2024
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - skyeye-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spring Boot后端应用
  skyeye-server:
    build:
      context: ./skyv-server
      dockerfile: Dockerfile
    container_name: skyeye-server
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/skyeye
      SPRING_DATASOURCE_USERNAME: skyeye_app
      SPRING_DATASOURCE_PASSWORD: skyeye_app_2024
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: skyeye_redis_2024
      JAVA_OPTS: -Xmx1g -Xms512m
    ports:
      - "8080:8080"
    volumes:
      - ./docker/logs/server:/app/logs
      - ./docker/files:/app/files
    networks:
      - skyeye-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Vue.js前端应用
  skyeye-web:
    build:
      context: ./skyv-web
      dockerfile: Dockerfile
    container_name: skyeye-web
    restart: unless-stopped
    environment:
      VITE_APP_API_BASE_URL: http://localhost:8080
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/logs/nginx:/var/log/nginx
    networks:
      - skyeye-network
    depends_on:
      skyeye-server:
        condition: service_healthy

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: skyeye-nginx
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/logs/nginx:/var/log/nginx
    networks:
      - skyeye-network
    depends_on:
      - skyeye-server
      - skyeye-web

  # 监控工具 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: skyeye-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - skyeye-network
    profiles:
      - monitoring

  # 监控工具 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: skyeye-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: skyeye_grafana_2024
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - skyeye-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  skyeye-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 