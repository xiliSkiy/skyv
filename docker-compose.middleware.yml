version: '3.8'

# SkyEye 中间件服务 Docker Compose 配置
# 用于快速启动数据库和其他依赖中间件

services:
  # PostgreSQL 数据库
  postgres:
    build:
      context: ./docker
      dockerfile: Dockerfile.postgres
    container_name: skyeye-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: skyeye
      POSTGRES_USER: skyeye_app
      POSTGRES_PASSWORD: skyeye_app_2024
      PGDATA: /var/lib/postgresql/data/pgdata
      # 启用性能优化
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # 挂载数据库初始化脚本 - 修复macOS Docker Desktop挂载问题
      - ./skyv-server/src/main/resources/db/migration:/docker-entrypoint-initdb.d/sql
      - ./docker/init-scripts:/docker-entrypoint-initdb.d/scripts
      - ./docker/logs/postgres:/var/log/postgresql
      # 挂载配置文件
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    networks:
      - skyeye-middleware
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skyeye_app -d skyeye"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: skyeye-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass skyeye_redis_2024
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/etc/redis/redis.conf:ro
      - ./docker/logs/redis:/var/log/redis
    networks:
      - skyeye-middleware
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Elasticsearch (可选，用于日志搜索)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: skyeye-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./docker/logs/elasticsearch:/usr/share/elasticsearch/logs
    networks:
      - skyeye-middleware
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - logging
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # MinIO 对象存储 (可选，用于文件存储)
  minio:
    image: minio/minio:latest
    container_name: skyeye-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: skyeye_minio
      MINIO_ROOT_PASSWORD: skyeye_minio_2024
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
      - ./docker/logs/minio:/var/log/minio
    networks:
      - skyeye-middleware
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    profiles:
      - storage
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # RabbitMQ 消息队列 (可选，用于异步消息处理)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: skyeye-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: skyeye_rabbitmq
      RABBITMQ_DEFAULT_PASS: skyeye_rabbitmq_2024
      RABBITMQ_DEFAULT_VHOST: skyeye
    ports:
      - "5672:5672"   # AMQP端口
      - "15672:15672" # 管理界面端口
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/logs/rabbitmq:/var/log/rabbitmq
    networks:
      - skyeye-middleware
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - messaging
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # InfluxDB 时序数据库 (可选，用于时序数据存储)
  influxdb:
    image: influxdb:2.7-alpine
    container_name: skyeye-influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: skyeye_admin
      DOCKER_INFLUXDB_INIT_PASSWORD: skyeye_influxdb_2024
      DOCKER_INFLUXDB_INIT_ORG: skyeye
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: skyeye-admin-token-2024
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
      - ./docker/logs/influxdb:/var/log/influxdb
    networks:
      - skyeye-middleware
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - timeseries
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 数据库管理工具 pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: skyeye-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@skyeye.com
      PGADMIN_DEFAULT_PASSWORD: skyeye_pgadmin_2024
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - skyeye-middleware
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - tools
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis 管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: skyeye-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: skyeye:skyeye-redis:6379:0:skyeye_redis_2024
      HTTP_USER: admin
      HTTP_PASSWORD: skyeye_redis_commander_2024
    ports:
      - "8081:8081"
    networks:
      - skyeye-middleware
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - tools
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

networks:
  skyeye-middleware:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24
    labels:
      description: "SkyEye 中间件服务网络"

volumes:
  postgres_data:
    driver: local
    labels:
      description: "PostgreSQL 数据存储"
  redis_data:
    driver: local
    labels:
      description: "Redis 数据存储"
  elasticsearch_data:
    driver: local
    labels:
      description: "Elasticsearch 数据存储"
  minio_data:
    driver: local
    labels:
      description: "MinIO 对象存储"
  rabbitmq_data:
    driver: local
    labels:
      description: "RabbitMQ 数据存储"
  influxdb_data:
    driver: local
    labels:
      description: "InfluxDB 数据存储"
  influxdb_config:
    driver: local
    labels:
      description: "InfluxDB 配置存储"
  pgadmin_data:
    driver: local
    labels:
      description: "pgAdmin 配置存储" 